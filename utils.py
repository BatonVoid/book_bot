# utils.py - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from config import Config

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in Config.ADMIN_IDS

def format_book_info(book: dict, show_description: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üìñ {book['title']}\n"
    text += f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}\n"
    text += f"üìÖ –ì–æ–¥: {book['year']}\n"
    text += f"üè∑Ô∏è –ñ–∞–Ω—Ä: {book['genre']}"
    
    if book['subgenre']:
        text += f" / {book['subgenre']}"
    
    if show_description:
        description = book['description']
        if len(description) > 200:
            description = description[:200] + "..."
        text += f"\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
    
    return text

def format_books_list(books: list, show_details: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    if not books:
        return "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî"
    
    text = ""
    for book in books:
        if show_details:
            text += format_book_info(book, show_description=False) + "\n\n"
        else:
            text += f"üìñ {book['title']} - {book['author']} ({book['year']})\n"
    
    return text.strip()

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."

def validate_year(year_str: str) -> tuple[bool, int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è"""
    try:
        year = int(year_str.strip())
        if 1000 <= year <= 2030:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è
            return True, year
        else:
            return False, 0
    except ValueError:
        return False, 0

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
    return text.strip().replace('\n', ' ').replace('\t', ' ')

def get_genre_emoji(genre: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∞–Ω—Ä–∞"""
    genre_emojis = {
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìö",
        "–¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üíª",
        "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è": "üìñ",
        "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è": "üìú",
        "–î–µ—Ç–µ–∫—Ç–∏–≤": "üïµÔ∏è",
        "–†–æ–º–∞–Ω": "üíù",
        "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "üöÄ",
        "–î—Ä–∞–º–∞": "üé≠",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üíª",
        "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è": "üîß",
        "–ù–∞—É–∫–∞": "üî¨",
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "üèóÔ∏è",
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞": "üìä",
        "–ú–µ–¥–∏—Ü–∏–Ω–∞": "üè•"
    }
    return genre_emojis.get(genre, "üìñ")

def format_profile_stats(favorite_count: int, recommendations_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    stats += f"‚ù§Ô∏è –õ—é–±–∏–º—ã—Ö –∫–Ω–∏–≥: {favorite_count}\n"
    stats += f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations_count}"
    return stats

def format_admin_stats(total_books: int, total_users: int, literature_books: int, tech_books: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    stats += f"üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books}\n"
    stats += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats += f"üìñ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {literature_books} –∫–Ω–∏–≥\n"
    stats += f"üíª –¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {tech_books} –∫–Ω–∏–≥"
    return stats