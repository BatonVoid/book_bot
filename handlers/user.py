# handlers/user.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from database.database import DatabaseManager
from keyboards import get_main_keyboard, get_genres_keyboard
from utils import is_admin, format_book_info, format_books_list
from states import SearchStates

router = Router()
db = DatabaseManager()

@router.message(Command("start"))
async def start_command(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.add_user(user_id, username)
    
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üìö\n\n"
    welcome_text += "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∫–Ω–∏–≥.\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(is_admin(user_id)))

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    favorite_books = await db.get_user_favorite_books(user_id)
    
    if not favorite_books:
        profile_text = "üìö –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚ù§Ô∏è –õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: –ø—É—Å—Ç–æ\n\n"
        profile_text += "–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
    else:
        profile_text = "üìö –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚ù§Ô∏è –õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏:\n"
        for book in favorite_books:
            profile_text += f"‚Ä¢ {book['title']} - {book['author']} ({book['year']})\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await db.get_recommendations_for_user(user_id)
        if recommendations:
            profile_text += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:\n"
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                profile_text += f"‚Ä¢ {rec['title']} - {rec['author']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="remove_favorite")]
    ])
    
    await message.answer(profile_text, reply_markup=keyboard)

@router.message(F.text == "üìñ –ñ–∞–Ω—Ä—ã")
async def show_genres(message: Message):
    """–ü–æ–∫–∞–∑ –∂–∞–Ω—Ä–æ–≤"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=get_genres_keyboard())

@router.callback_query(F.data.startswith("genre_"))
async def handle_genre_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞"""
    genre = callback.data.split("_")[1]
    page = int(callback.data.split("_")[2]) if len(callback.data.split("_")) > 2 else 0
    
    books = await db.get_books_by_genre(genre, limit=5, offset=page*5)
    total_books = await db.get_books_count_by_genre(genre)
    
    if not books:
        await callback.message.edit_text("–í —ç—Ç–æ–º –∂–∞–Ω—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ üòî")
        return
    
    text = f"üìö –ö–Ω–∏–≥–∏ –∂–∞–Ω—Ä–∞ '{genre}':\n\n"
    keyboard_buttons = []
    
    for book in books:
        text += format_book_info(book, show_description=False) + "\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìñ {book['title']}", 
                callback_data=f"book_action_{book['id']}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"genre_{genre}_{page-1}"))
    if (page + 1) * 5 < total_books:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"genre_{genre}_{page+1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö –∂–∞–Ω—Ä–∞–º", callback_data="back_to_genres")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "back_to_genres")
async def back_to_genres(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∂–∞–Ω—Ä–∞–º"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=get_genres_keyboard())

@router.callback_query(F.data.startswith("book_action_"))
async def handle_book_action(callback: CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–æ–π"""
    book_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    book = await db.get_book_by_id(book_id)
    is_favorite = await db.is_book_in_favorites(user_id, book_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f"toggle_favorite_{book_id}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"genre_{book['genre']}_0")]
    ])
    
    text = format_book_info(book, show_description=True)
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("toggle_favorite_"))
async def toggle_favorite(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    book_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    is_favorite = await db.is_book_in_favorites(user_id, book_id)
    
    if is_favorite:
        await db.remove_from_favorites(user_id, book_id)
        await callback.answer("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚ùå")
    else:
        await db.add_to_favorites(user_id, book_id)
        await callback.answer("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    book = await db.get_book_by_id(book_id)
    is_favorite = not is_favorite  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f"toggle_favorite_{book_id}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"genre_{book['genre']}_0")]
    ])
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥")
async def search_books_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_search_query)

@router.message(StateFilter(SearchStates.waiting_for_search_query))
async def search_books_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    query = message.text.strip()
    books = await db.search_books_by_title(query)
    
    if not books:
        await message.answer("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
    else:
        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':\n\n"
        keyboard_buttons = []
        
        for book in books[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            text += f"üìñ {book['title']} - {book['author']} ({book['year']})\n"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìñ {book['title']}", 
                    callback_data=f"book_action_{book['id']}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(text, reply_markup=keyboard)
    
    await state.clear()

@router.callback_query(F.data == "add_favorite")
async def add_favorite_from_profile(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    books = await db.get_all_books(limit=10)
    
    if not books:
        await callback.message.edit_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
        return
    
    keyboard_buttons = []
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n\n"
    
    for book in books:
        text += f"üìñ {book['title']} - {book['author']}\n"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚ûï {book['title']}", 
                callback_data=f"add_to_fav_{book['id']}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("add_to_fav_"))
async def add_to_favorites_process(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    book_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    success = await db.add_to_favorites(user_id, book_id)
    
    if success:
        await callback.answer("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è")
    else:
        await callback.answer("–ö–Ω–∏–≥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùå")

@router.callback_query(F.data == "remove_favorite")
async def remove_favorite_from_profile(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    favorite_books = await db.get_user_favorite_books(user_id)
    
    if not favorite_books:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥.")
        return
    
    keyboard_buttons = []
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:\n\n"
    
    for book in favorite_books:
        text += f"üìñ {book['title']} - {book['author']}\n"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚ûñ {book['title']}", 
                callback_data=f"remove_from_fav_{book['id']}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("remove_from_fav_"))
async def remove_from_favorites_process(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    book_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    success = await db.remove_from_favorites(user_id, book_id)
    
    if success:
        await callback.answer("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíî")
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ‚ùå")

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await my_profile(callback.message)

@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìö\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(is_admin(message.from_user.id)))