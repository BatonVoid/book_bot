# handlers/admin.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from database import DatabaseManager
from keyboards import get_admin_keyboard, get_main_keyboard
from utils import is_admin, format_book_info
from states import AdminStates

router = Router()
db = DatabaseManager()

@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ ‚ùå")
        return
    
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
async def add_book_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥ ‚ùå")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    await state.set_state(AdminStates.waiting_for_title)

@router.message(StateFilter(AdminStates.waiting_for_title))
async def add_book_title(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    await state.update_data(title=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_year)

@router.message(StateFilter(AdminStates.waiting_for_year))
async def add_book_year(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è"""
    try:
        year = int(message.text.strip())
        await state.update_data(year=year)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
        await state.set_state(AdminStates.waiting_for_author)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ):")

@router.message(StateFilter(AdminStates.waiting_for_author))
async def add_book_author(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await state.update_data(author=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    await state.set_state(AdminStates.waiting_for_description)

@router.message(StateFilter(AdminStates.waiting_for_description))
async def add_book_description(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    await state.update_data(description=message.text.strip())
    
    # –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data="admin_genre_–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")],
        [InlineKeyboardButton(text="üíª –¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data="admin_genre_–¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_genre)

@router.callback_query(F.data.startswith("admin_genre_"), StateFilter(AdminStates.waiting_for_genre))
async def add_book_genre(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∫–Ω–∏–≥–∏"""
    genre = callback.data.split("admin_genre_")[1]
    await state.update_data(genre=genre)
    
    # –ü–æ–¥–∂–∞–Ω—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    if genre == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", callback_data="admin_subgenre_–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è")],
            [InlineKeyboardButton(text="üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="admin_subgenre_–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è")],
            [InlineKeyboardButton(text="üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤", callback_data="admin_subgenre_–î–µ—Ç–µ–∫—Ç–∏–≤")],
            [InlineKeyboardButton(text="üíù –†–æ–º–∞–Ω", callback_data="admin_subgenre_–†–æ–º–∞–Ω")],
            [InlineKeyboardButton(text="üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="admin_subgenre_–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞")],
            [InlineKeyboardButton(text="üé≠ –î—Ä–∞–º–∞", callback_data="admin_subgenre_–î—Ä–∞–º–∞")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_subgenre_")]
        ])
    else:  # –¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_subgenre_–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [InlineKeyboardButton(text="üîß –ò–Ω–∂–µ–Ω–µ—Ä–∏—è", callback_data="admin_subgenre_–ò–Ω–∂–µ–Ω–µ—Ä–∏—è")],
            [InlineKeyboardButton(text="üî¨ –ù–∞—É–∫–∞", callback_data="admin_subgenre_–ù–∞—É–∫–∞")],
            [InlineKeyboardButton(text="üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", callback_data="admin_subgenre_–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")],
            [InlineKeyboardButton(text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="admin_subgenre_–≠–∫–æ–Ω–æ–º–∏–∫–∞")],
            [InlineKeyboardButton(text="üè• –ú–µ–¥–∏—Ü–∏–Ω–∞", callback_data="admin_subgenre_–ú–µ–¥–∏—Ü–∏–Ω–∞")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_subgenre_")]
        ])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_subgenre)

@router.callback_query(F.data.startswith("admin_subgenre_"), StateFilter(AdminStates.waiting_for_subgenre))
async def add_book_subgenre(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–¥–∂–∞–Ω—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    subgenre = callback.data.split("admin_subgenre_")[1] if callback.data.split("admin_subgenre_")[1] else None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –ë–î
    book_id = await db.add_book(
        title=data['title'],
        author=data['author'],
        year=data['year'],
        description=data['description'],
        genre=data['genre'],
        subgenre=subgenre
    )
    
    success_text = "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
    success_text += f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
    success_text += f"üë§ –ê–≤—Ç–æ—Ä: {data['author']}\n"
    success_text += f"üìÖ –ì–æ–¥: {data['year']}\n"
    success_text += f"üè∑Ô∏è –ñ–∞–Ω—Ä: {data['genre']}"
    if subgenre:
        success_text += f" / {subgenre}"
    success_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:100]}..."
    
    await callback.message.edit_text(success_text)
    await state.clear()

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏")
async def edit_books_list(message: Message):
    """–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥ ‚ùå")
        return
    
    books = await db.get_all_books(limit=10)
    
    if not books:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
        return
    
    keyboard_buttons = []
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    for book in books:
        text += f"üìñ {book['title']} - {book['author']}\n"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {book['title']}", 
                callback_data=f"edit_book_{book['id']}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_book_"))
async def edit_book_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    book = await db.get_book_by_id(book_id)
    
    text = f"üìñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {book['title']}\n\n"
    text += format_book_info(book, show_description=False)
    text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {book['description'][:100]}...\n\n"
    text += "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_{book_id}_title")],
        [InlineKeyboardButton(text="üë§ –ê–≤—Ç–æ—Ä–∞", callback_data=f"edit_field_{book_id}_author")],
        [InlineKeyboardButton(text="üìÖ –ì–æ–¥", callback_data=f"edit_field_{book_id}_year")],
        [InlineKeyboardButton(text="üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field_{book_id}_description")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book_id}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_edit_list")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_field_"))
async def edit_field_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    parts = callback.data.split("_")
    book_id = int(parts[2])
    field = parts[3]
    
    field_names = {
        'title': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        'author': '–∞–≤—Ç–æ—Ä–∞',
        'year': '–≥–æ–¥',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ'
    }
    
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:")
    await state.update_data(book_id=book_id, field=field)
    await state.set_state(AdminStates.edit_waiting_value)

@router.message(StateFilter(AdminStates.edit_waiting_value))
async def edit_field_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    book_id = data['book_id']
    field = data['field']
    new_value = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –≥–æ–¥–∞
    if field == 'year':
        try:
            new_value = int(new_value)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ):")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    success = await db.update_book_field(book_id, field, new_value)
    
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏.")
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_book_"))
async def confirm_delete_book(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""  
    book_id = int(callback.data.split("_")[2])
    book = await db.get_book_by_id(book_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{book_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '{book['title']}'?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_book_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    await db.delete_book(book_id)
    await callback.message.edit_text("‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

@router.callback_query(F.data == "back_to_edit_list")
async def back_to_edit_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await edit_books_list(callback.message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ‚ùå")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_books = len(await db.get_all_books())
    total_users = len(await db.get_all_users())
    
    literature_books = len(await db.get_books_by_genre("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", limit=1000))
    tech_books = len(await db.get_books_by_genre("–¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", limit=1000))
    
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    stats_text += f"üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books}\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats_text += f"üìñ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {literature_books} –∫–Ω–∏–≥\n"
    stats_text += f"üíª –¢–µ—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {tech_books} –∫–Ω–∏–≥\n"
    
    await message.answer(stats_text)